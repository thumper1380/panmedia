from base64 import b64decode, b64encode
from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import models
from django.utils.translation import gettext_lazy as _


class WebauthnRegistration(models.Model):
    user = models.OneToOneField(get_user_model(), on_delete=models.CASCADE)
    challenge = models.CharField(max_length=9000, blank=True, null=True)


class WebauthnAuthentication(models.Model):
    user = models.OneToOneField(get_user_model(), on_delete=models.CASCADE)
    challenge = models.CharField(max_length=9000, blank=True, null=True)


class WebauthnCredentials(models.Model):
    user = models.ForeignKey(
        get_user_model(), on_delete=models.CASCADE, related_name="webauthn"
    )
    name = models.CharField(
        max_length=100,
        verbose_name="Name",
        blank=True,
        null=True,
    )
    credential_public_key = models.CharField(
        max_length=9000, blank=True, null=True)
    credential_id = models.CharField(max_length=9000, blank=True, null=True)
    current_sign_count = models.IntegerField(default=0)

    def __str__(self):
        return self.name


class WebAuthDevice(models.Model):
    """
    Identifies a single key-pair provisioned on a user's authenticator for
    authenticating against only this site.
    """

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="webauth_devices",
    )
    name = models.CharField(
        max_length=250,
        help_text=_("nickname to help the user identify a given key"),
    )
    credential_id = models.BinaryField(max_length=128)
    public_key = models.BinaryField(max_length=256)
    format = models.CharField(
        max_length=250,
        help_text=_(
            "generated by the client authenticator to identify this key")
    )
    type = models.CharField(max_length=250)
    sign_count = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def get_credential_id(self):
        return b64encode(self.credential_id).decode("utf-8")
    
    
    def __str__(self):
        return self.name
